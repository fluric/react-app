{"version":3,"sources":["main/webapp/store/initialState.js","main/webapp/store/index.js","main/webapp/components/SideMenu.js","main/webapp/components/RockPaperScissors.style.js","main/webapp/utilities/RockPaperScissorsUtility.js","main/webapp/components/RockPaperScissors.js","main/webapp/App.js","index.js"],"names":["initialState","rootReducer","reduceReducers","map","reducer","produce","draft","action","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","MainMenu","Menu","direction","inverted","Item","Icon","name","id","StyledButton","styled","Button","ButtonContainer","div","Actions","ActionList","Outcomes","Colors","DEFAULT","defaultColors","ButtonWrapper","props","color","onClick","size","icon","RockPaperScissors","useState","setAction","colors","setColors","opponentAction","setOpponentAction","opponentColor","setOpponentColor","executeRound","nextAction","nextOpponentAction","index","Math","floor","random","getOpponentAction","outcome","getOutcome","oppositeOutcome","getOppositeOutcome","nextColors","currentTarget","Container","Grid","columns","centered","GridColumn","mobile","verticalAlign","Transition","visible","isNull","App","ReactDOM","render","locale","messages","document","getElementById"],"mappings":"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","file":"static/js/main.8297d49b.chunk.js","sourcesContent":["export const initialState = {};\n","import { composeWithDevTools } from 'redux-devtools-extension';\nimport { applyMiddleware, createStore } from 'redux';\nimport produce from 'immer';\nimport thunkMiddleware from 'redux-thunk';\nimport reduceReducers from 'reduce-reducers';\n\nimport { initialState } from 'main/webapp/store/initialState';\n\nconst withProduce = reducers => reducers.map(reducer => produce((draft, action) => reducer(draft, action)));\n\nconst rootReducer = reduceReducers(initialState, ...withProduce([]));\n\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n\nexport default store;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Icon, Menu } from 'semantic-ui-react';\n\nexport const MainMenu = () => (\n  <Menu direction='top' inverted>\n    <Menu.Item>\n      <Icon name='gamepad' />\n      <FormattedMessage id={'app.menu.label.rockPaperScissors'} />\n    </Menu.Item>\n  </Menu>\n);\n","import { Button } from 'semantic-ui-react';\nimport styled from 'styled-components';\n\nexport const StyledButton = styled(Button)`\n  margin: 5px !important;\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n`;\n","export const Actions = {\n  ROCK: 'rock',\n  PAPER: 'paper',\n  SCISSORS: 'scissors',\n};\n\nexport const ActionList = [Actions.ROCK, Actions.PAPER, Actions.SCISSORS];\n\nexport const Outcomes = {\n  WIN: 'win',\n  DRAW: 'draw',\n  DEFEAT: 'defeat',\n};\nexport const Colors = {\n  DEFAULT: null,\n  [Outcomes.WIN]: 'green',\n  [Outcomes.DRAW]: 'blue',\n  [Outcomes.DEFEAT]: 'red',\n};\n\nexport const defaultColors = {\n  [Actions.PAPER]: Colors.DEFAULT,\n  [Actions.ROCK]: Colors.DEFAULT,\n  [Actions.SCISSORS]: Colors.DEFAULT,\n};\n\nexport const getOpponentAction = () => {\n  const index = Math.floor(Math.random() * 3);\n  return ActionList[index];\n};\n\nexport const getOutcome = (action, opponentAction) => {\n  if (action === opponentAction) {\n    return Outcomes.DRAW;\n  }\n  if (action === Actions.PAPER) {\n    return opponentAction === Actions.SCISSORS ? Outcomes.DEFEAT : Outcomes.WIN;\n  }\n  if (action === Actions.SCISSORS) {\n    return opponentAction === Actions.ROCK ? Outcomes.DEFEAT : Outcomes.WIN;\n  }\n  if (action === Actions.ROCK) {\n    return opponentAction === Actions.PAPER ? Outcomes.DEFEAT : Outcomes.WIN;\n  }\n};\n\nexport const getOppositeOutcome = outcome => {\n  if (outcome === Outcomes.DRAW) {\n    return Outcomes.DRAW;\n  }\n  return outcome === Outcomes.WIN ? Outcomes.DEFEAT : Outcomes.WIN;\n};\n","import React, { useState } from 'react';\nimport { Container, Grid, GridColumn, Transition } from 'semantic-ui-react';\nimport { isNull } from 'lodash';\n\nimport { ButtonContainer, StyledButton } from 'main/webapp/components/RockPaperScissors.style';\nimport {\n  Actions,\n  Colors,\n  defaultColors,\n  getOpponentAction,\n  getOppositeOutcome,\n  getOutcome,\n} from 'main/webapp/utilities/RockPaperScissorsUtility';\n\nexport const ButtonWrapper = props => {\n  const { id, color, onClick } = props;\n  return <StyledButton size={'large'} id={id} icon={`hand ${id}`} onClick={onClick} color={color} />;\n};\n\nexport const RockPaperScissors = () => {\n  const [, setAction] = useState(null);\n  const [colors, setColors] = useState(defaultColors);\n  const [opponentAction, setOpponentAction] = useState(null);\n  const [opponentColor, setOpponentColor] = useState(null);\n\n  const executeRound = nextAction => {\n    const nextOpponentAction = getOpponentAction();\n    const outcome = getOutcome(nextAction, nextOpponentAction);\n    const oppositeOutcome = getOppositeOutcome(outcome);\n\n    setAction(nextAction);\n    const nextColors = { ...defaultColors, [nextAction]: Colors[outcome] };\n    setColors(nextColors);\n    setOpponentColor(Colors[oppositeOutcome]);\n    setOpponentAction(nextOpponentAction);\n  };\n\n  const onClick = ({ currentTarget: { id: action } }) => executeRound(action);\n\n  return (\n    <Container>\n      <Grid columns={2} centered>\n        <GridColumn mobile={3}>\n          <ButtonContainer>\n            <ButtonWrapper id={Actions.ROCK} color={colors[Actions.ROCK]} onClick={onClick} />\n            <ButtonWrapper id={Actions.PAPER} color={colors[Actions.PAPER]} onClick={onClick} />\n            <ButtonWrapper id={Actions.SCISSORS} color={colors[Actions.SCISSORS]} onClick={onClick} />\n          </ButtonContainer>\n        </GridColumn>\n        <GridColumn mobile={3} verticalAlign={'middle'}>\n          <Transition visible={!isNull(opponentAction)}>\n            <StyledButton icon={`hand ${opponentAction}`} size={'large'} color={opponentColor} />\n          </Transition>\n        </GridColumn>\n      </Grid>\n    </Container>\n  );\n};\n","import React from 'react';\nimport { Container } from 'semantic-ui-react';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport { MainMenu } from 'main/webapp/components/SideMenu';\nimport { RockPaperScissors } from 'main/webapp/components/RockPaperScissors';\n\nconst App = () => (\n  <Container>\n    <MainMenu />\n    <RockPaperScissors />\n  </Container>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { IntlProvider } from 'react-intl';\nimport { Provider } from 'react-redux';\n\nimport store from 'main/webapp/store';\nimport App from 'main/webapp/App';\nimport messages from 'main/webapp/translations/en.json';\n\nReactDOM.render(\n  <Provider store={store}>\n    <IntlProvider locale={'en'} messages={messages}>\n      <App />\n    </IntlProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}